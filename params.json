{"name":"Complexity Analysis of Various Matrix Multiplication Algorithms","tagline":"","body":"Perkalian matriks merupakan hal yang sudah tidak asing didengar sejak SMA. Kita tentunya telah mengetahui bagaimana cara mengalikan dua matriks. Namun agar hasil perkalian terdefinisi, ada satu syarat yang harus dipenuhi, yaitu jumlah kolom pada matriks pertama sama dengan jumlah baris pada matriks kedua dan jumlah baris pada matriks pertama sama dengan jumlah kolom pada matriks kedua. Setelah syarat tersebut terpenuhi, barulah perkalian matriks dapat dilakukan. Mengalikan matriks mungkin merupakan hal yang tidak sulit untuk kita kerjakan. Namun hal yang menarik adalah bagaimana jika kita menginginkan komputer untuk mengerjakan perkalian matriks tersebut?\r\n\r\nTerdapat berbagai macam algoritma untuk menyelesaikan perkalian matriks. Setiap algoritma memiliki kompleksitas yang sama atau berbeda-beda. Untuk matriks dengan jumlah baris dan kolom yang kecil, kompleksitas yang dimiliki oleh algoritma tertentu mungkin tidak memberikan efek yang cukup besar. Namun jika matriks memiliki jumlah baris dan kolom yang besar, pemakaian algoritma yang memiliki kompleksitas yang besar akan memakan waktu yang lama untuk mengalikan matriks tersebut. Berikut akan dijelaskan beberapa algoritma untuk melakukan perkalian matriks dan kompleksitasnya.\r\n\r\n# Algoritma Brute Force\r\nCara mengalikan matriks dengan algoritma _brute force_ sama dengan cara yang biasa kita lakukan, yaitu dengan menghitung setiap elemen hasil perkalian satu per satu, dengan mengalikan dua vektor yang panjangnya n. Misalkan C = A x B dan elemen-elemen matriks dinyatakan sebagai c<sub>ij</sub>, a<sub>ij</sub>, dan b<sub>ij</sub>. Perkalian matriks A dan B dapat dilakukan dengan cara:\r\n\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image001.JPG?raw=true\" alt=\"image001\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image002.jpg?raw=true\" alt=\"image002\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Sumber :\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Munir, Rinaldi. 2009. ”Diktat Kuliah IF 2251 Strategi Algoritmik”. Bandung:Program Studi Teknik Informatika STEI ITB.\r\n</p>\r\n\r\n<i>Pseudocode</i>-nya adalah sebagai berikut.\r\n\r\n```\r\nfor i=1 to n\r\n   for j=1 to n    \r\n     c[i][j]=0\r\n     for k=1 to n\r\n         c[i][j] = c[i][j]+a[i][k]*b[k][j]\r\n```\r\n\r\nBerdasarkan <i>pseudocode</i> di atas,\r\njumlah operasi perkalian adalah n<sup>3</sup> dan jumlah operasi penjumlahan\r\nadalah n<sup>3</sup>, sehingga totalnya adalah 2n<sup>3</sup>. Oleh karena itu,\r\nkompleksitas perkalian matriks dengan algoritma <i>brute force</i> adalah O(n<sup>3</sup>).\r\n\r\n# Algoritma Perkalian Matriks Paralel\r\nAlgoritma ini merupakan algoritma <i>divide and conquer</i>. Misalkan C = A x B. Setelah itu, bagilah matriks A dan B menjadi 4 bagian. Untuk lebih jelasnya perhatikan gambar di bawah ini.\r\n\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image003.png?raw=true\" alt=\"image003\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Sumber :\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  <a\r\nhref=\"http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/\">http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/</a>\r\n, diakses 23 Mei 2015 (dengan beberapa modifikasi)\r\n</p>\r\n\r\nElemen-elemen matriks C adalah sebagai berikut.\r\n\r\nI = ae + bg\r\n\r\nJ = af + bh\r\n\r\nK = ce + dg\r\n\r\nL = cf + ch\r\n\r\n\r\nKompleksitas dari algoritma ini adalah O(n<sup>3</sup>) dan tidak memberikan perbaikan kompleksitas dibandingkan dengan algoritma <i>brute force</i>.\r\n\r\n# Algoritma Starssen\r\nAlgoritma Strassen juga merupakan algoritma jenis <i>divide and conquer</i>, yaitu membagi persoalan menjadi bagian yang\r\nlebih kecil untuk diselesaikan. Algoritma ini ditemukan oleh Volker Starssen pada tahun 1969.\r\n\r\nMisalkan C = A x B. Sama dengan Algoritma perkalian matriks parallel, matriks A dan B dibagi menjadi 4 bagian. Untuk lebih jelasnya perhatikan gambar dibawah ini.\r\n\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image004.png?raw=true\" alt=\"image004\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Sumber :\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  <a\r\nhref=\"http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/\">http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/</a>\r\n, diakses 23 Mei 2015\r\n</p>\r\n\r\nKemudian didefinisikan P1, P2, …, P7 sedemikian sehingga\r\n\r\nP1 = a(f - h)\r\n\r\nP2 = (a + b)h\r\n\r\nP3 = (c + d)e\r\n\r\nP4 = d(g – e)\r\n\r\nP5 = (a + d)(e + h)\r\n\r\nP6 = (b – d)(g + h)\r\n\r\nP7 = (a – c)(e + f)\r\n\r\nSetelah itu didefinisikan hasil dari perkalian matriks, yaitu\r\n\r\nI = P5 + P4 – P2 + P6\r\n\r\nJ = P1 + P2\r\n\r\nK = P3 + P4\r\n\r\nL = P1 + P5 – P3 – P7\r\n\r\nPerkalian matriks dengan menggunakan algoritma Starssen memiliki kompleksitas yang lebih kecil, yaitu O(n<sup>log 7</sup>) atau O(n<sup>2.81</sup>). Meskipun memiliki perbedaan yang tidak terlalu besar dibandingkan dengan menggunakan algoritma brute force, untuk n yang sangat besar, tentunya algoritma Starssen jauh lebih cepat dibandingkan dengan algortima <i>brute force</i>.\r\n\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image005.jpg?raw=true\" alt=\"image005\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Sumber :\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  <a\r\nhref=\"http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/\">http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/</a>\r\n, diakses 23 Mei 2015\r\n</p>\r\n\r\n# Algoritma Coppersmith-Winograd\r\nAlgoritma perkalian matriks ini merupakan algoritma tercepat sampai tahun 2010 dengan kompleksitas O(n<sup>2.375477</sup>). Algoritma ini merupakan perbaikan dari algoritma <i>brute force </i>dan algoritma Starssen. Namun algoritma ini sangat kompleks untuk diimplementasikan dan hanya menguntungkan untuk matriks yang ukurannya besar sehingga algoritma ini jarang digunakan.\r\n\r\n# Algoritma Stothers\r\nAlgoritma Stothers dikemukakan oleh Andrew Stothers pada tahun 2010. Algoritma ini merupakan perbaikan dari algoritma Coppersmith-Winogard dengan kompleksitas O(n<sup>2.374</sup>).\r\n\r\n# Algoritma Williams\r\nAlgoritma ini memiliki kompleksitas O(n<sup>2.373</sup>). Algoritma ini juga masih jarang digunakan karena sangat kompleks untuk diimplementasikan.\r\n\r\n<br>\r\n<br>\r\nSelain algoritma yang telah dibahas di atas, masih terdapat beberapa macam algoritma lain untuk melakukan perkalian matriks. Sampai saat ini, belum terdapat algoritma perkalian matriks yang kompleksitasnya lebih kecil daripada O(n<sup>2</sup>). Algoritma perkalian matriks tercepat sampai saat ini adalah simplifikasi dari algoritma Williams yang dikemukakan oleh Francois Le Gall pada tahun 2014 dengan kompleksitas O(n<sup>2.3728639</sup>). Untuk lebih memperjelas berbagai macam algoritma perkalian matriks beserta kompleksitasnya, dapat melihat gambar di bawah ini.\r\n\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"https://github.com/devina-ekawati/multiplication-matrix-algorithm-article/blob/master/img/image006.jpg?raw=true\" alt=\"image006\"/>\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  Sumber :\r\n</p>\r\n</p>\r\n<p align=\"center\">\r\n  <a\r\nhref=\"http://en.wikipedia.org/wiki/Matrix_multiplication#Algorithms_for_efficient_matrix_multiplication\">http://en.wikipedia.org/wiki/Matrix_multiplication#Algorithms_for_efficient_matrix_multiplication</a>\r\n, diakses 23 Mei 2015\r\n</p>\r\n\r\n### Referensi\r\nMunir, Rinaldi. 2009. ”Diktat Kuliah IF 2251 Strategi Algoritmik”. Bandung:Program Studi Teknik Informatika STEI ITB.\r\n\r\n<http://www.stoimen.com/blog/2012/11/26/computer-algorithms-strassens-matrix-multiplication/>, diakses 23 Mei 2015\r\n\r\n<http://en.wikipedia.org/wiki/Matrix_multiplication#Algorithms_for_efficient_matrix_multiplication>, diakses 23 Mei 2015","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}